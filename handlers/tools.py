from aiogram import F, Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from utils.states import Tools_form

from keyboards.reply import tools_kb, main
from keyboards.builders import any_kb

import random

router = Router()

emoji_string = (
    "üòÄ üòÉ üòÑ üòÅ üòÜ üòÖ üòÇ ü§£ üòä üòá üôÇ üôÉ üòâ üòå üòç ü•∞ üòò üòó üòô üòö "
    "üòã üòõ üòù üòú ü§™ ü§® üßê ü§ì üòé ü•∏ ü§© ü•≥ üòè üòí üòû üòî üòü üòï üôÅ ‚òπ "
    "üò£ üòñ üò´ üò© ü•∫ üò¢ üò≠ üò§ üò† üò° ü§¨ ü§Ø üò≥ ü•µ ü•∂ üò± üò® üò∞ üò• "
    "üòì ü§ó ü§î ü§≠ ü§´ ü§• üò∂ üòê üòë üò¨ üôÑ üòØ üò¶ üòß üòÆ üò≤ üò¥ ü§§ üò™ "
    "üòµ üòµ‚Äçüí´ ü§ê ü•¥ ü§¢ ü§Æ ü§ß üò∑ ü§í ü§ï ü§ë ü§† üòà üëø üëπ üë∫ ü§° üí© "
    "üëª üíÄ ‚ò† üëΩ üëæ ü§ñ üò∫ üò∏ üòπ üòª üòº üòΩ üôÄ üòø üòæ üëã ü§ö üñê ‚úã "
    "üññ üëå ü§å ü§è ‚úå ü§û ü´∞ ü§ü ü§ò ü§ô üëà üëâ üëÜ üñï üëá ‚òù üëç üëé ‚úä "
    "üëä ü§õ ü§ú üëè üôå ü´∂ üëê ü§≤ ü§ù üôè ‚úç üíÖ ü§≥ üí™ ü¶æ ü¶ø ü¶µ ü¶∂ üë£ "
    "üëÇ ü¶ª üëÉ üß† ü¶∑ ü¶¥ üëÄ üëÅ üëÖ üëÑ üíã ü©∏ üëì üï∂ ü•Ω ü¶∫ üëî üëï "
    "üëñ üß£ üß§ üß• üß¶ üëó üëò üëô üëö üëõ üëú üëù üéí ü©¥ ü©± ü©≤ ü©≥ üëû "
    "üëü ü•æ ü•ø üë† üë° üë¢ üëë üëí üé© üéì üß¢ ‚õë ü™ñ üíÑ üíç üíº ü™ë üõã "
    "üõè üõå üß∏ ü™Ü üñº ü™û ü™ü üõé üß≥ ‚åõ ‚è≥ ‚è∞ ‚è± ‚è≤ üï∞ üïõ üïß üïê üïú "
    "üïë üïù üïí üïû üïì üïü üïî üï† üïï üï° üïñ üï¢ üïó üï£ üïò üï§ üïô üï• "
    "üïö üï¶ üåë üåí üåì üåî üåï üåñ üåó üåò üåô üåö üåõ üåú üå° ‚òÄ üåù üåû "
    "ü™ê ‚≠ê üåü üå† üåå ‚òÅ ‚õÖ üå§ üå• üå¶ üåß ‚õà üå© üå® üå™ üå´ üå¨ üåÄ üåà "
    "üåÇ ‚òÇ ‚òî ‚õ± ‚ö° ‚ùÑ ‚òÉ ‚õÑ ‚òÑ üî• üíß üåä üéÉ üßô‚Äç‚ôÄÔ∏è üßô‚Äç‚ôÇÔ∏è üßõ‚Äç‚ôÄÔ∏è "
    "üßõ‚Äç‚ôÇÔ∏è üßú‚Äç‚ôÄÔ∏è üßú‚Äç‚ôÇÔ∏è üßù‚Äç‚ôÄÔ∏è üßù‚Äç‚ôÇÔ∏è üßû‚Äç‚ôÄÔ∏è üßû‚Äç‚ôÇÔ∏è üßü‚Äç‚ôÄÔ∏è üßü‚Äç‚ôÇÔ∏è "
    "üßå üë®‚Äçüíª üë©‚Äçüíª üßë‚Äçüíª üë®‚Äçüîß üë©‚Äçüîß üßë‚Äçüîß üë®‚Äçüî¨ üë©‚Äçüî¨ üßë‚Äçüî¨ "
    "üë®‚Äçüé® üë©‚Äçüé® üßë‚Äçüé® üë®‚ÄçüöÄ üë©‚ÄçüöÄ üßë‚ÄçüöÄ üë®‚Äçüöí üë©‚Äçüöí üßë‚Äçüöí üßó‚Äç‚ôÄÔ∏è "
    "üßó‚Äç‚ôÇÔ∏è üßó üßò‚Äç‚ôÄÔ∏è üßò‚Äç‚ôÇÔ∏è üßò üõÄ üõå üíÉ üï∫ üëØ‚Äç‚ôÄÔ∏è üëØ‚Äç‚ôÇÔ∏è üï¥ üö∂‚Äç‚ôÄÔ∏è "
    "üö∂‚Äç‚ôÇÔ∏è üö∂ üèÉ‚Äç‚ôÄÔ∏è üèÉ‚Äç‚ôÇÔ∏è üèÉ ü¶Ø ü¶º ü¶Ω üèÑ‚Äç‚ôÄÔ∏è üèÑ‚Äç‚ôÇÔ∏è üèÑ üèä‚Äç‚ôÄÔ∏è "
    "üèä‚Äç‚ôÇÔ∏è üèä ü§Ω‚Äç‚ôÄÔ∏è ü§Ω‚Äç‚ôÇÔ∏è ü§Ω üö¥‚Äç‚ôÄÔ∏è üö¥‚Äç‚ôÇÔ∏è üö¥ üöµ‚Äç‚ôÄÔ∏è üöµ‚Äç‚ôÇÔ∏è üöµ "
    "üèá üï¥ üèÜ üéñ üèÖ ü•á ü•à ü•â üèµ üéó üé´ üéü üé™ ü§π‚Äç‚ôÄÔ∏è ü§π‚Äç‚ôÇÔ∏è ü§π "
    "üé® üé≠ üé§ üéß üéº üéπ ü•Å üé∑ üé∫ üé∏ ü™ï üè¥‚Äç‚ò†Ô∏è üá∫üá≥"
)


@router.message(F.text == "üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
async def tools_menu(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ", reply_markup=tools_kb)
    await state.set_state(Tools_form.start_menu)


@router.message(Tools_form.start_menu)
async def random_int(message: Message, state: FSMContext):
    if message.text == "–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ":
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–æ–∑–æ–Ω (–ü—Ä–∏–º–µ—Ä: 1-100)", reply_markup=any_kb(["–ù–∞–∑–∞–¥"])
        )
        await state.set_state(Tools_form.random_input_value)
    elif message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–í–æ–∑—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main)
        await state.clear()


@router.message(Tools_form.random_input_value, F.text.regexp(r"^\d+-\d+$"))
async def send_random_int(message: Message, state: FSMContext):
    from_number, to_number = message.text.split("-")
    from_number, to_number = int(from_number), int(to_number)
    if from_number > to_number:
        await message.answer("–õ–µ–≤–æ–µ —á–∏—Å–ª–æ, –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –ø—Ä–∞–≤–æ–≥–æ")
    elif from_number == to_number:
        await message.answer(f"–ß–∏—Å–ª–æ {from_number}")
    else:
        await message.answer(f"–ß–∏—Å–ª–æ {random.randint(from_number, to_number)}")


@router.message(
    (Tools_form.random_input_value | Tools_form.random_emoji), F.text == "–ù–∞–∑–∞–¥"
)
async def return_to_main_menu(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", reply_markup=tools_kb)
    await state.set_state(Tools_form.start_menu)
